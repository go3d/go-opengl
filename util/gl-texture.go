package glutil

import (
	gl "github.com/go3d/go-opengl/core"
)

//	Implemented by specialized texture types such as Texture2D.
type Texture interface {
	//	Deletes and (re)creates the texture object based on its current params.
	Recreate() error
}

type TextureBase struct {
	//	The OpenGL handle for this texture object.
	//	This is 0 before calling Recreate() and after calling Dispose().
	GlHandle gl.Uint

	//	The type of texture, such as for example gl.TEXTURE_2D.
	GlTarget gl.Enum

	//	Specifies the sized internal format to be used to store texture image data,
	//	as per gl.TexStorageNN(). Defaults to gl.RGBA8.
	SizedInternalFormat gl.Enum

	//	If true, then (if Support.Textures.Immutable is also true) whenever this Texture
	//	is Recreate()d it is declared immutable in OpenGL, meaning its dimensions are
	//	locked at creation time and cannot be changed subsequently.
	//	Defaults to Support.Textures.Immutable.
	Immutable bool

	//	Settings for this texture's MIP map, if any.
	MipMap struct {
		//	If true (the default) and NumLevels isn't 1, all MIP map
		//	levels are automatically generated by Recreate()
		AutoGen bool

		//	The maximum number of MIP map levels for this texture object.
		//	Set to 0 (the default) to have Recreate() determine this
		//	automatically, set to 1 for a texture object with no MIP map.
		NumLevels gl.Sizei
	}

	//	Information regarding the pixel data stored by this texture object.
	PixelData struct {
		//	Specifies the format of the pixel data, as per
		//	gl.TexSubImageNN(). Defaults to gl.RGBA.
		Format gl.Enum

		//	Specifies the data type of the pixel data, as per
		//	gl.TexSubImageNN(). Defaults to gl.UNSIGNED_BYTE.
		Type gl.Enum

		//	Points to the first pixel of the data stream to be uploaded
		//	by Recreate(), if any. Defaults to gl.Ptr(nil).
		Ptr gl.Ptr
	}
}

//	Binds this texture object.
func (me *TextureBase) Bind() {
	gl.BindTexture(me.GlTarget, me.GlHandle)
}

//	Deletes this texture object from OpenGL.
func (me *TextureBase) Dispose() {
	if me.GlHandle != 0 {
		gl.DeleteTextures(1, &me.GlHandle)
		me.GlHandle = 0
	}
}

func (me *TextureBase) immutable() bool {
	return Support.Textures.Immutable && me.Immutable
}

func (me *TextureBase) init() {
	me.MipMap.AutoGen, me.Immutable = true, Support.Textures.Immutable
	me.SizedInternalFormat = gl.RGBA8
	me.PixelData.Ptr = gl.Ptr(nil)
	me.PixelData.Format = gl.RGBA
	me.PixelData.Type = gl.UNSIGNED_BYTE
}

func (me *TextureBase) onAfterRecreate() {
	me.Unbind()
}

func (me *TextureBase) onBeforeRecreate() (err error) {
	if me.immutable() {
		me.Unbind()
		me.Dispose()
		err = gl.Try.GenTextures(1, &me.GlHandle)
	} else if me.GlHandle == 0 {
		err = gl.Try.GenTextures(1, &me.GlHandle)
	}
	if err == nil {
		me.Bind()
	}
	return
}

//	Unbinds whatever texture is currently bound.
func (me *TextureBase) Unbind() {
	gl.BindTexture(me.GlTarget, 0)
}
